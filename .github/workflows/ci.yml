name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint:check

    - name: Check for linting errors
      if: failure()
      run: |
        echo "❌ ESLint found errors. Run 'npm run lint:fix' to auto-fix some issues."
        exit 1

  test:
    name: Test Application
    runs-on: ubuntu-latest
    needs: lint

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: iot_data_test
          MYSQL_USER: iot_user
          MYSQL_PASSWORD: iot_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" --silent; do
          sleep 1
        done

    - name: Run health check
      env:
        DB_HOST: 127.0.0.1
        DB_USER: iot_user
        DB_PASSWORD: iot_password
        DB_NAME: iot_data_test
        NODE_ENV: test
      run: |
        npm start &
        sleep 10
        curl -f http://localhost:3000/health || exit 1
        pkill -f "node server.js"

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t iot-data-collector .

    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 3000:3000 \
          -e DB_HOST=host.docker.internal \
          -e NODE_ENV=test \
          iot-data-collector
        sleep 10
        curl -f http://localhost:3000/health || exit 1
        docker stop test-container
