name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint:check

    - name: Check for linting errors
      if: failure()
      run: |
        echo "❌ ESLint found errors. Run 'npm run lint:fix' to auto-fix some issues."
        exit 1

  test:
    name: Test Application
    runs-on: ubuntu-latest
    needs: lint
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: iot_data_test
          MYSQL_USER: iot_user
          MYSQL_PASSWORD: iot_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install required tools
      run: sudo apt-get update && sudo apt-get install -y curl procps

    - name: Run health check
      env:
        DB_HOST: 127.0.0.1
        DB_USER: iot_user
        DB_PASSWORD: iot_password
        DB_NAME: iot_data_test
        NODE_ENV: test
      run: |
        npm start &
        sleep 15
        curl -f http://localhost:3000/health || exit 1
        pkill -f "node server.js"

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t iot-data-collector .

    - name: Test Docker image with Docker Compose
      run: |
        # Create a test docker-compose file for CI
        cat > docker-compose.test.yml << 'EOF'
        version: '3.8'
        services:
          mysql:
            image: mysql:8.0
            container_name: iot_mysql_test
            ports:
              - "3306:3306"
            environment:
              MYSQL_ROOT_PASSWORD: root
              MYSQL_DATABASE: iot_data_test
              MYSQL_USER: iot_user
              MYSQL_PASSWORD: iot_password
            networks:
              - iot-test-network
            healthcheck:
              test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
              timeout: 20s
              retries: 10

          app:
            image: iot-data-collector
            container_name: iot_app_test
            ports:
              - "3000:3000"
            environment:
              NODE_ENV: test
              DB_HOST: mysql
              DB_PORT: 3306
              DB_USER: iot_user
              DB_PASSWORD: iot_password
              DB_NAME: iot_data_test
              PORT: 3000
              HOST: 0.0.0.0
            networks:
              - iot-test-network
            depends_on:
              mysql:
                condition: service_healthy
            healthcheck:
              test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s

        networks:
          iot-test-network:
            driver: bridge
        EOF

        # Start the services
        echo "Starting services with Docker Compose..."
        docker-compose -f docker-compose.test.yml up -d

        # Wait for services to be healthy
        echo "Waiting for services to be healthy..."
        timeout 120 bash -c 'until docker-compose -f docker-compose.test.yml ps | grep -q "healthy"; do sleep 5; done'

        # Test the health endpoint
        echo "Testing health endpoint..."
        for i in {1..10}; do
          if curl -f http://localhost:3000/health; then
            echo "Health check passed!"
            break
          else
            echo "Health check attempt $i failed, retrying in 5 seconds..."
            sleep 5
          fi
          if [ $i -eq 10 ]; then
            echo "All health checks failed. Service logs:"
            docker-compose -f docker-compose.test.yml logs
            exit 1
          fi
        done

        # Show logs for debugging
        echo "Application logs:"
        docker-compose -f docker-compose.test.yml logs app

        # Cleanup
        docker-compose -f docker-compose.test.yml down -v
